{
  "name": "n2n",
  "version": "0.0.5",
  "description": "a Node.js P2P network",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://patr0nus@github.com/patr0nus/n2n.git"
  },
  "keywords": [
    "p2p"
  ],
  "author": {
    "name": "patr0nus"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/patr0nus/n2n/issues"
  },
  "homepage": "https://github.com/patr0nus/n2n",
  "dependencies": {
    "request": "~2.34.0",
    "underscore": "~1.6.0",
    "smokesignal": "~0.2.0",
    "remote-events": "~1.1.4",
    "socket.io": "~0.9.16",
    "nssocket": "~0.5.1",
    "node-uuid": "~1.4.1"
  },
  "readme": "#A Node.js P2P Network\n\n##Starting a seed\nOne or several seed servers are required to bootstrap the network. To start a seed server listening 6785:   \n```javascript\nvar Seed = require('n2n').Seed;\n\nvar seed = new Seed();\nseed.listen(6785);\nconsole.log('Seed listening 6785...');\n```\n##Starting a node\nThe following code snippet starts a node by connecting to the seed server `seed.com:6785`. If the node has a public IP, it will start a seed server listening 6785, as well.\n```javascript\nvar Node = require('n2n').Node;\nvar node = new Node(6785);\nnode.connect([{ host: 'seed.com', port: 6785 }]);\n```\n\nOnce the node gets online, the event `online` will be emitted.\n\n```javascript\nnode.on('online', function () {\n  console.log('I am online:', this.id);\n});\n```\n\nEvent `node::online` means another node gets online. A object representing the new node will be passed to event handlers:\n```javascript\nnode.on('node::online', function (newNode) {\n  console.log('Someone is online:', newNode.id);\n});\n```\n\n##Communication\nNodes communicate via events.  \n###Node#send(targetId:string, eventName:string, [data:*])\nEmit a custom event called `eventName` on a specific node.\n###Node#broadcast(eventName:string, [data:*])\nEmit a custom event called `eventName` on all nodes online.\n\n###Handling custom events\nThe name of custom events must be prefixed with `'node::'`. If any, event data will be passed to event handlers:\n```javascript\nnode.on('node::hello', function (senderId) {\n  console.log('Hello from', senderId);\n});\n```",
  "readmeFilename": "README.md",
  "_id": "n2n@0.0.5",
  "_from": "n2n@0.0.5"
}
